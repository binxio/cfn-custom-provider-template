AWSTemplateFormatVersion: '2010-09-09'
Description: Custom CloudFormation Provider
Parameters:
  AppVPC:
    Type: String
    Default: ''
  PrivateSubnets:
    Type: CommaDelimitedList
    Default: ''
  DefaultSecurityGroup:
    Type: String
    Default: ''
  S3BucketPrefix:
    Type: String
    Default: ''
  CFNCustomProviderZipFileName:
    Type: String
    Default: lambdas/cfn-custom-provider-latest.zip
Conditions:
  DoNotAttachToVpc: !Equals
    - !Ref 'AppVPC'
    - ''
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: CFNCustomProviderPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - kms:Encrypt
                Resource:
                  - '*'
              - Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
                Effect: Allow
  CFNCustomProvider:
    Type: AWS::Lambda::Function
    Properties:
      Description: Custom CloudFormation Provider implementation
      Code:
        S3Bucket: !Sub '${S3BucketPrefix}-${AWS::Region}'
        S3Key: !Ref 'CFNCustomProviderZipFileName'
      FunctionName: cfn-custom-provider
      Handler: provider.handler
      MemorySize: 128
      Role: !GetAtt 'LambdaRole.Arn'
      VpcConfig: !If
        - DoNotAttachToVpc
        - !Ref 'AWS::NoValue'
        - SecurityGroupIds:
            - !Ref 'DefaultSecurityGroup'
          SubnetIds: !Ref 'PrivateSubnets'
      Runtime: python3.9
